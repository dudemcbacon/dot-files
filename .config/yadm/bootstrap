#!/bin/bash
#
# 1a. Make sure zsh is installed.
# 1b. Make sure git is installed.
# 1c. Make sure tmux is installed
# 1d. Make sure pip is installed.
# 2. Install oh-my-zsh from GitHub
# 3. Link appropriate dot-files
#
set -e

# Helper functions
log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $*"
}

check_command() {
    local cmd=$1
    local name=${2:-$1}
    local version_opt=${3:---version}

    log "Checking for ${name}"
    set +e
    $cmd $version_opt
    if [ $? -eq 127 ]; then
        set -e
        log "Error: ${name} is not installed"
        exit 1
    fi
    set -e
}

DEV_DIR="${HOME}/development"

# Ensure development directory exists
if [ ! -d "$DEV_DIR" ]; then
    log "Creating development directory: ${DEV_DIR}"
    mkdir -p "$DEV_DIR"
fi

system_type=$(uname -s)
log "Detected system type: ${system_type}"

if [ "$system_type" = "Darwin" ]; then
    SKIP_LINUX_BREW=true
    # install homebrew if it's missing
    if ! command -v brew >/dev/null 2>&1; then
        log "Installing homebrew"
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi

    if [ -f "$HOME/.Brewfile" ]; then
        log "Updating homebrew bundle"
        set +e
        brew bundle --global
        set -e
    fi
elif [ "$system_type" = "Linux" ]; then
    distro=$(awk -F= '/^NAME/{print $2}' /etc/os-release)
    if [ -z "$distro" ]; then
        log "Error: Could not detect Linux distribution"
        exit 1
    fi
    log "Detected Linux distribution: ${distro}"

    if [ "$distro" = \"Aurora\" ]; then
        log "Setting up Aurora Linux environment"
        # Since, in Aurora, asdf is installed via brew, skip the installation section further down the script
        SKIP_ASDF_INSTALL=true
        SKIP_STARSHIP_INSTALL=true
        log "Installing packages via brew"
        brew install asdf libyaml libffi starship nvim ctags direnv

        # Install asdf plugins and versions
        log "Installing asdf plugins"
        set +e
        asdf plugin add ruby
        asdf plugin add java
        asdf plugin add python
        asdf plugin add golang
        asdf plugin add nodejs
        set -e
        asdf install
    elif [ "$distro" = \"Debian\ GNU/Linux\" ]; then
        sudo apt-get update

        sudo apt-get install -y zsh tmux git universal-ctags direnv \
            software-properties-common curl

        sudo apt-get -yq install build-essential gdb lcov libbz2-dev libffi-dev \
            libgdbm-dev liblzma-dev libncurses5-dev libreadline6-dev libsqlite3-dev \
            libssl-dev lzma lzma-dev tk-dev uuid-dev xvfb zlib1g-dev
    elif [ "$distro" = \"Fedora\ Linux\" ]; then
        sudo dnf install git zsh tmux ctags direnv curl wget
        sudo dnf groupinstall "Development Tools" -y

        # Python build deps
        sudo dnf install zlib-devel bzip2 bzip2-devel readline-devel sqlite sqlite-devel openssl-devel xz xz-devel libffi-devel findutils -y

        # Ruby build deps
        sudo dnf install -y git-core gcc rust patch make bzip2 openssl-devel libyaml-devel libffi-devel readline-devel zlib-devel gdbm-devel ncurses-devel perl-FindBin perl-lib perl-File-Compare
    elif [ "$distro" = \"Ubuntu\" ]; then
        sudo apt-get update

        sudo apt-get install -y zsh tmux git universal-ctags direnv \
            software-properties-common curl

        # Ubuntu has a really old version of Nvim so install it from upstream
        sudo add-apt-repository -y ppa:neovim-ppa/unstable
        sudo apt-get install -y neovim

        # Needed to build python
        sudo apt-get install -y build-essential checkinstall libreadline-dev \
            libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev \
            libbz2-dev libffi-dev liblzma-dev libyaml-dev

        # WSL needs this or it will complain about locales endlessly
        sudo apt install locales
        sudo locale-gen en_US.UTF-8
        # sudo dpkg-reconfigure locales
    fi
fi

# Check for required commands
log "Checking for required commands"
check_command zsh
check_command git
check_command tmux "tmux" "-V"
check_command nvim "neovim"
check_command direnv
check_command ctags "universal-ctags"

# Install linux brew
if [ "${SKIP_ASDF_INSTALL}" != "true" ]; then
    if [ ! -e /home/linuxbrew/.linuxbrew/bin/brew ]; then
        log "Installing linuxbrew"
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        if [ $? -ne 0 ]; then
            log "Error: Problem installing linuxbrew"
            exit 1
        fi
    fi
fi

# Install powerline-fonts
if [ ! -e ${HOME}/.fonts-installed ]; then
    log "Installing powerline-fonts"
    git clone https://github.com/powerline/fonts.git ${DEV_DIR}/fonts --depth=1
    if [ $? -ne 0 ]; then
        log "Error: Problem installing powerline-fonts"
        exit 1
    fi
    ${DEV_DIR}/fonts/install.sh
    rm -rf ${DEV_DIR}/fonts
    touch ~/.fonts-installed
fi

# Install tpm
if [ ! -e ${HOME}/.tmux/plugins/tpm ]; then
    log "Installing tmux plugin manager"
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
    if [ $? -eq 128 ]; then
        log "Error: Problem installing tpm"
        exit 1
    fi
fi

# Install oh-my-zsh
if [ ! -e ${DEV_DIR}/.oh-my-zsh ]; then
    log "Installing oh-my-zsh"
    git clone https://github.com/robbyrussell/oh-my-zsh.git ${DEV_DIR}/.oh-my-zsh
    if [ $? -eq 128 ]; then
        log "Error: Problem installing oh-my-zsh. Do you need to set a proxy?"
        exit 1
    fi
fi

# Install asdf
if [ "${SKIP_ASDF_INSTALL}" != "true" ]; then
    if [ ! -e ${HOME}/.asdf ]; then
        log "Installing asdf"
        git clone https://github.com/asdf-vm/asdf.git ~/.asdf
        if [ $? -eq 128 ]; then
            log "Error: Problem installing asdf"
            exit 1
        fi
    fi
    if [ "$system_type" = "Darwin" ]; then
        source "/opt/homebrew/opt/asdf/libexec/asdf.sh"
    else
        source ~/.asdf/asdf.sh
    fi
    log "Installing asdf plugins"
    set +e
    asdf plugin add ruby
    asdf plugin add java
    asdf plugin add python
    asdf plugin add golang
    asdf plugin add nodejs
    set -e
    asdf install
fi

# Prep vim-plug
if [ ! -e ${HOME}/.local/share/nvim/site/autoload/plug.vim ]; then
    log "Installing vim-plug"
    sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
         https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    if [ $? -eq 128 ]; then
        log "Error: Problem installing vim-plug"
        exit 1
    fi
fi

if command -v nvim >/dev/null 2>&1; then
    log "Bootstrapping Vim"
    nvim '+AstroUpdate'
fi

# Prep starship
if [ ! -e /usr/local/bin/starship ] && [ "${SKIP_STARSHIP_INSTALL}" != "true" ]; then
    log "Installing starship"
    curl -sS https://starship.rs/install.sh | sh
    if [ $? -eq 128 ]; then
        log "Error: Problem installing starship"
        exit 1
    fi
fi

# Change shell to zsh
log "Changing default shell to zsh"
if [ "$distro" = \"Aurora\" ]; then
    sudo usermod -s /bin/zsh $USER
else
    chsh -s /bin/zsh
fi

log "Bootstrap completed successfully"
